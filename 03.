#include<stdio.h>

//01.判断存储模式是大端还是小端
//
//int main() {
//	int a = 1;
//	char* p=&a;
//	if (*p == 1) {
//		printf("小端");
//	}
//	else{
//		printf("大端");
//	}
//	return 0;
//}

//int check() {
//	int a = 1;
//	//char* p =(char*) &a;//char类型只访问第一个字节
//	//char* p,*p访问1个字节；int* p，*p访问4个字节
//	//指针类型决定了指针+1，-1，跳过几个字节
//	//return *p;//返回1-->小端    返回0-->大端
//	return *(char*)&a;
//}
//int main() {
//	int ret = check();
//	if (ret == 1) {
//		printf("小端");
//	}
//	else {
//		printf("大端");
//	}
//	return 0;
//}

//02.整形的存储方式------> char
//int main() {
//
//	char a = -1;
//	10000000 00000000 00000000 00000001原码
//  11111111 11111111 11111111 11111111补码
//  11111111 11111111 11111111 11111111 按符号位补位---->再求原码----->10000000 00000000 00000000 00000001 = -1
//	signed char b = -1;
//	unsigned char c = -1;
//	00000000 00000000 00000000 11111111  =  255
//	return 0;
//}

//int main() {
//	char a = -128;
//	//10000000 00000000 00000000 10000000
//	//11111111 11111111 11111111 01111111
//	//11111111 11111111 11111111 10000000补码----->存入内存----->10000000
//	//11111111 11111111 11111111 10000000补全的补码
//	//11111111 11111111 11111111 10000000 无符号，原码=补码
//	printf("%u\n",a);
//	// %d 打印十进制数的有符号
//	// %u 打印十进制数的无符号
//	return 0;
//}
// char 类型：-128----->127  要存128，则是127+1--->-128（存进去的是-128）

//03.整形的存储方式------ > int
//int main() {
//
//	int i = -20;
//	// 10000000 00000000 00000000 00010100原码
//	// 11111111 11111111 11111111 11101100补码
//	unsigned int j = 10;
//	// 00000000 00000000 00000000 00001010原=补
//	printf("%d\n",i+j);
//	// 11111111 11111111 11111111 11110110补码
//	// 11111111 11111111 11111111 11110101  -1
//	// 10000000 00000000 00000000 00001010原码
//	return 0;
//}

//int main() {
//
//	unsigned int i;
//	for (i = 9; i >= 0;i--) {
//		printf("%u\n",i);
//	}
//// i为无符号数，无符号数为0~255 >=0;
//	return 0;
//}

//#include<windows.h>
//int main() {
//
//	char a[1000];
//	int i;
//	for (i = 0; i < 1000;i++) {
//		a[i] = -1 - i;
//		// -1 -2 -3 -4 -5 ..........-128 -129 .........-1000
//		// -1 -2 -3 -4 -5 ..........-128 127 126.......1 0.....
//		// -1 -2............-128 127 126 .............1 0(\0:结束)
//	}
//	printf("%d",strlen(a));
//	return 0;
//}

//int main() {
//	// 无限循环：无符号数始终为0~255的范围
//	unsigned char i = 0;
//	for (i = 0; i <= 255;i++) {
//		printf("Hello World\n");
//	}
//	return 0;
//}


//4.浮点数的存储方式 ------> float
//int main() {
//	float f = 5.5;
	//5.5
	//101.1
	//s  -  0
	//m  -  1.011(011)
	//e  -  2   ----->+127  =  129
	// 0 10000001 01100000000000000000000
	// 0100 0000 1011 0000 0000 0000 0000 0000
	// 4 0 b 0 0 0 0 0

//	int n = 9;
//	//00000000000000000000000000001001补码
//	float* p = (float*)&n;
//	//0 00000000 00000000000000000001001
//	//(-1)^0*0.00000000000000000001001 * 2^-126
//	printf("%f\n",*p);
//	*p = 9.0;
//	//1001.0
//	//1.001*2^3
//	//(-1)^0*1.001*2^3
//	//0 10000010 0010000000000000000000
//	printf("%d\n",n);
//	//0 10000010 0010000000000000000000
//	return 0;
//}


//05.指针进阶
//void test(int arr[]) {
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	// 这里的arr传进来的指针变量，指针变量的大小为4/8（32/64位平台）个字节    arr[0]为int整形，4个字节
//	printf("%d",sz);
//}
//int main() {
//	int arr[10] = {0};
//	test(arr);
//	return 0;
//}

// 05.1字符指针char*
//int main() {
//	char arr[] = "abcdef";
//	char* p = arr;
//	printf("%s\n",arr);
//	printf("%s\n", p);
// return 0;
//}

//int main() {
//	char* p = "abcdef";//"abcdef"为常量字符串,p存的是a的地址
//	printf("%c\n",*p);//p存放a的地址，*p为a，打印a
//	printf("%s\n", p);//打印abcdef字符串
//	return 0;
//}


//int main() {
//	const char* p = "abcdef";
////	*p = 'w';
//	printf("%s\n", p);
//	return 0;
//}

/*int main() {
	char a1[] = "abcdef";
	char a2[] = "abcdef";
	char* p1 =a1;
	*p1 = 'w';
	printf(" %s\n", p1);*///打印wbcdef ------>创建数组，取一块空间放置常量字符串，可以改变首元素  而直接用指针指向字符串，不能被改变
	//char* p1 = "abcdef"; 
	//char* p2 = "abcdef";
	//if (p1 == p2) {
	//	printf("hehe\n");//打印hehe，"abcdef"为常量字符串，p1 p2指向同一个空间
	//}
	//else printf("haha\n");
	
	//if (a1==a2) {
	//	printf("hehe\n");
	//}
	//else printf("haha\n");//打印haha,取两个空间创建两个数组，两个空间都放同一个常量字符串，但首地址不一样
//}


//int main() {
//	const char str1[] = "abc";
//	const char str2[] = "abc";
//	const char *p1 = "abc";
//	const char *p2 = "abc";
//	printf("%d\n",str1);
//	printf("%d\n",str2);// str1 str2地址不同
//	printf("%d\n",p1);
//	printf("%d\n",p2);// p1 p2地址相同
//	return 0;
//}

//05.2指针数组----->数组
//int main() {
//
//	int arr[10] = {0};//整形数组
//	char ch[5] = { 0 };//字符数组
//	int* parr[4];// 存放整形指针的数组------>指针数组
//	char* pch[4];// 存放字符指针的数组------>指针数组
//	return 0;
//}

//int main() {
//
//	int a = 10;
//	int b = 20;
//	int c = 30;
//	int d = 40;
//	int* arr[4] = {&a,&b,&c,&d};//存放a b c d的地址
//	return 0;
//}


//int main() {
//
//	int a1[] = { 1,2,3,4,5 };
//	int a2[] = { 2,3,4,5,6 };
//	int a3[] = { 3,4,5,6,7 };
//	int* parr[] = {a1,a2,a3};
//	int i = 0;
//	for (i = 0; i < 3;i++) {
//		int j = 0;
//		for (j = 0; j < 5;j++) {
//			printf("%d ",*(parr[i]+j));
//		}
//		printf("\n");
//	}
//	return 0;
//}


//06.数组指针------->指针
int main() {

	//int* p1=NULL;//整形指针------->存放整形的地址（指向整形的指针）
	//char* p2 = NULL;//字符指针------->存放字符的地址（指向字符的指针）
	//数组指针------->存放数组的地址（指向数组的指针）
	//int arr[10] = {0};
	//arr - 首元素地址 == &arr[0]
	//&arr - 数组的地址
	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
	int* p[10]=&arr;//数组地址存起来

	return 0;
}
